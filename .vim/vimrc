" todo:
" - allow for fzf goto prev directory? (issue: https://github.com/junegunn/fzf.vim/issues/338#issuecomment-623087034)
" - setup Coc goto definition and references (or, try ALE)
" - read up on command-line mode. configure <C-e> and <C-a> emacs cmds.
" - try out a file manager, like ranger (to replace netrw)
" - contribute to Vim. implement [[ and ]] for another language. see https://vi.stackexchange.com/questions/25741/what-is-a-section-in-vim

" this overwrites stuff (incl viminfo), so putting at the top
set nocompatible

" Plugins -------------------- {{{
" vimplug for plugins
call plug#begin()
" LSP
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" commenting stuff out
Plug 'tpope/vim-commentary'
" surround.vim
Plug 'https://github.com/tpope/vim-surround'
" repeat.vim 
Plug 'https://github.com/tpope/vim-repeat'
" colorscheme
Plug 'morhetz/gruvbox'
" kotlin syntax highlighting
Plug 'https://github.com/udalov/kotlin-vim'
" markdown preview in browser (:MarkdownPreview)
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
" * search on visual selection
Plug 'https://github.com/nelstrom/vim-visual-star-search'
" fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" == plugin todo == 
" - https://github.com/tpope/vim-unimpaired (todo: extract useful ones myself)
" - abolish.vim ( I should implement the ones I want from scratch!)
"             ( e.g. convert words to snake/camel/upper case. )
call plug#end()
" }}}


"==================== remaps: the magic of vim!==================== {{{
" - I don't use marks! could be good...? I could see it...

source ~/.vim/utils.vim " utility functions!

let mapleader=" "
let maplocalleader="," " testing. backslach better?
set showcmd

" nuttballs
nnoremap s <C-w><C-w>
" S is useless ('cc' alias)
nnoremap S s
" I can use 'S' to single-char replacements instead of 'r'
nnoremap r <C-^>
nnoremap R :echom "todo: map R"<CR>
nnoremap - :echom "todo: map -"<CR>
nnoremap ' :echom "todo: map '"<CR>
" nnoremap ` :echom "todo: map `"<CR>
nnoremap \ :echom "todo: map \\"<CR>

" misc testing
nnoremap <silent> <C-h> :<C-u>nohlsearch<CR><C-l>
" 1 hand is way less ergo feeling, lol
nnoremap <C-f> <C-u>

" trident todo: (~/.vim/plugin/trident.vim)
" - save scroll position in the window! it changes when hopping back (marks
"   and :e both do this it seems...)
" - UI (minor??)
" - [minor] 'add mark' semantics (e.g. via <leader>a) instead of only m<mark char>
set viminfo+=!
nnoremap mj :call TridentSetMapping('j')<CR>
nnoremap mk :call TridentSetMapping('k')<CR>
nnoremap ml :call TridentSetMapping('l')<CR>
nnoremap m; :call TridentSetMapping(';')<CR>
nnoremap <C-j> :call TridentJumpToFile('j')<CR>
nnoremap <C-k> :call TridentJumpToFile('k')<CR>
nnoremap <C-l> :call TridentJumpToFile('l')<CR>
" Vim doesn't recognize <C-;>. I've mapped <C-;> to Option+s in iterm.
nnoremap ß :call TridentJumpToFile(';')<CR>

" basics
nnoremap <leader>w <C-w><C-w>
" delete buffer without losing split
" (competes with this 500-stars 80 lines: https://github.com/moll/vim-bbye)
nnoremap <C-c> :bp\|bd! #<CR>
command! Bdi :call DeleteInactiveBufs()
" section movement on { and } (note: vim remaps these for .vim, py, etc)
map [[ ?{<CR>w99[{
map ][ /}<CR>b99]}
map ]] j0[[%/{<CR>
map [] k$][%?}<CR>

" my lite terminal hax (~/.vim/plugin/terminal)
" philosophy: terms are lightweight and isolated/throwaway.
" - trivial to create and close
" - easy to swap back & forth (assumes you don't use tabs otherwise)
" - don't pollute buffer list
" note: an alternative to this would be 1 or 2 dedicated Ctrl-keys that open/switch
" to terminal windows, like harpoon.
nnoremap <leader>t :call CreateLiteTerm(1)<CR>ls<CR>
nnoremap <leader>T :call CreateLiteTerm(0)<CR>ls<CR>
tnoremap <F3> <C-w>gt
noremap <F3> gt
inoremap <F3> <C-o>gt

" dotfile editing
nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <leader>eb :e ~/.bash_profile<CR>
nnoremap <silent> <leader>ef :execute 'edit ~/.vim/ftplugin/'
                                      \ .. &filetype .. '.vim'<CR>
nnoremap <silent> <leader>eu :e ~/.vim/utils.vim<CR>
nnoremap <silent> <leader>en :e ~/.vim/notes.vim<CR>
nnoremap <silent> <leader>ep :E ~/.vim/plugin/<CR>

" coc
inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"
nnoremap <leader>cc :call ToggleCoc()<CR>

" fzf (home-row optimized, I press these the most!)
nnoremap <silent> <leader>sf :Rg<CR>
nnoremap <silent> <leader>fj :Buffers<CR>
nnoremap <silent> <leader>fk :Files<CR>
nnoremap <silent> <leader>fl :Helptags<CR>
nnoremap <silent> <leader>fh :History<CR>
nnoremap <silent> <leader>fu :GFiles<CR>

" ~~ misc mappings ~~
" open last buffer in a botright split ("split previous")
nnoremap <silent> <leader>sp :execute "botright split " .. bufname("#")<CR>

" testing
" todo: fix (breaks when toggling 2x first time on grep operator plugin).
nnoremap <leader>y :call QuickfixToggle()<CR>
nnoremap <leader>x :call FoldColumnToggle()<CR>

"}}}

" ~~~ AUTOCMDs ~~~ {{{
" groups are necessary for autocmds to just be included 1x
augroup vimrc
  autocmd!
  "misc
  au vimenter * ++nested colorscheme gruvbox
  " ~~~ ABBREVs ~~~
  " testing: code templates
  au FileType python iabbrev <buffer> fff def func(a: int) -> int:<cr>return 1
augroup END

augroup filetype_vim
  autocmd!
  " enable folding for Vimscript files (usage: 'za' to toggle)
  autocmd FileType vim setlocal foldmethod=marker
  " remember folds for vimrc 
  " (exclude 'curdir' from viewoptions to not clobber current dir)
  let &viewoptions="folds,cursor"
  autocmd BufWinLeave vimrc mkview
  autocmd BufWinEnter vimrc silent loadview 
augroup END
" }}}

"==================== CoC configs ==================== 
let g:coc_start_at_startup=v:false
" augroup lsp
"     autocmd BufReadPost *.kt setlocal filetype=kotlin
" augroup END

" need this???
" let g:LanguageClient_serverCommands = {
"     \ 'kotlin': ["kotlin-language-server"],
"     \ }
" enable CoC by file
" augroup coc
"     autocmd BufReadPost *.py CocEnable " python
" augroup END

"==================== Abbrevs ==================== 
iabbrev max@ max@maxdarling.org 

"==================== Operators ==================== 
" grep (plugin/grep-operator.vim) "todo: screen funkiness. redraw?
nnoremap <leader>g <Plug>GrepOperatorNormalMode
vnoremap <leader>g <Plug>GrepOperatorVisualMode

"==================== Motions ==================== 
" markdown heading in current section
onoremap ih :<c-u>execute "normal! ?^\\(=\\\|-\\)\\+$\r:nohlsearch\rkvg_"<cr>
onoremap ah :<c-u>execute "normal! ?^\\(=\\\|-\\)\\+$\r:nohlsearch\rg_vk0"<cr>

"==================== Statusline ==================== 
" set statusline=%f\ %y%=%l/%L
set statusline=%f\ %y%=\(%c\)\ \ %l/%L
" always show statusline
set laststatus=2

"==================== GOOD ==================== {{{
set mouse=a " full mouse enable

set history=500

" colorscheme
set bg=dark "override lightmode Terminal

" line numbers
set number

" tab = 4 spaces wide
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" tabs insert spaces
set expandtab
" autoindent (good for markdown bulleted lists)
set autoindent

" When searching try to be smart about cases
set ignorecase
set smartcase

" search highlight
set hlsearch
set incsearch
" add :nohlsearch to the default <C-l> redraw functionality (practical vim book)
" clear search when sourcing (otherwise higlights last search)
let @/ = ""

" number (relnum too distracting while scrolling...)
set number


" Enable filetype plugins
filetype plugin on
filetype indent on
syntax on
" disable indents for html, though, cuz that's my Xah style
au FileType html set indentexpr=""
" hack that makes backspace work as intended in insert mode
set backspace=indent,eol,start

" wildmenu
set wildmode=list:longest,full
set wildmenu
set wildignore=*.o,*.obj,*~

" set formatoptions-=o "dont continue comments when pushing /O

"vertical/horizontal scroll off settings
set scrolloff=3
set sidescrolloff=7
set sidescroll=1

" hidden buffers
set hidden

"make Y consistent with C and D
nnoremap Y y$

"}}}
"

"==================== TESTING  ==================== {{{
" Briefly show matching brackets when text indicator is over them
set showmatch
set matchtime=2

" prevent auto-newline when lines get long
set textwidth=0

" speed up pasting?
set noswapfile

" put all swap files in a single folder 
" source: https://vi.stackexchange.com/questions/177/what-is-the-purpose-of-swap-files
set directory^=~/.vim/swapfiles//

set showcmd     "show incomplete cmds down the bottom
set showmode    "show current mode down the bottom

"display tabs and trailing spaces
set list
set listchars=tab:▷⋅,trail:⋅,nbsp:⋅

set wrap        "dont wrap lines
set linebreak   "wrap lines at convenient points
set breakindent "wrap lines such that vertical indent is not broken

" make C-u, C-d, etc, not move cursor to start of line
set nostartofline

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Set the command window height to 2 lines, to avoid many cases of having to
" 'press <Enter> to continue'
set cmdheight=2

" 'o' doesn't continue comment block from current line
set formatoptions-=o
"}}}

"TO TEST  ==================== {{{
"set whichwrap+=<,>,h,l

"" Don't redraw while executing macros (good performance config)
"set lazyredraw

"" No annoying sound on errors
"set noerrorbells
"set novisualbell
"set t_vb=
"set tm=500
" }}}
