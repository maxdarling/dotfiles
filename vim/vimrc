" todo:
" - setup Coc goto definition and references (or, try ALE)
" - try out a file manager, like ranger (to replace netrw)

" Plugins -------------------- {{{
call plug#begin()
Plug 'tpope/vim-commentary'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/tpope/vim-repeat'
Plug 'https://github.com/nelstrom/vim-visual-star-search'
Plug 'morhetz/gruvbox'

" markdown preview in browser (:MarkdownPreview)
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

" LSP
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" == plugin todo == 
" - https://github.com/tpope/vim-unimpaired (todo: extract useful ones myself)
" - abolish.vim ( I should implement the ones I want from scratch!)
"             ( e.g. convert words to snake/camel/upper case. )
call plug#end()
" }}}

" shared settings and mappings with Neovim
source ~/.vim/base_config.vim

" ~~~ Utility Mappings ~~~ {{{
" dotfile editing
nnoremap <silent> <leader>ev :e ~/.vim/vimrc<CR>
nnoremap <silent> <leader>eb :e ~/.bash_profile<CR>
nnoremap <silent> <leader>ef :execute 'edit ~/.vim/ftplugin/'
            \ .. &filetype .. '.vim'<CR>
nnoremap <silent> <leader>eu :e ~/.vim/plugin/utils.vim<CR>
nnoremap <silent> <leader>en :e ~/.vim/notes.vim<CR>
nnoremap <silent> <leader>ep :E ~/.vim/plugin/<CR>

" TRIDENT
" trident todo: (~/.vim/plugin/trident.vim)
" - save scroll position in the window! it changes when hopping back (marks
"   and :e both do this it seems...)
" - UI (minor??)
" - [minor] 'add mark' semantics (e.g. via <leader>a) instead of only m<mark char>
set viminfo+=!
nnoremap mj :call TridentSetMapping('j')<CR>
nnoremap mk :call TridentSetMapping('k')<CR>
nnoremap ml :call TridentSetMapping('l')<CR>
nnoremap m; :call TridentSetMapping(';')<CR>
nnoremap <C-j> :call TridentJumpToFile('j')<CR>
nnoremap <C-k> :call TridentJumpToFile('k')<CR>
nnoremap <C-l> :call TridentJumpToFile('l')<CR>
" Vim doesn't recognize <C-;>. I've mapped <C-;> to Option+s in iterm.
nnoremap ÃŸ :call TridentJumpToFile(';')<CR>

command! Bdi :call DeleteInactiveBufs()
" section movement on { and } (note: vim remaps these for .vim, py, etc)
map [[ ?{<CR>w99[{
map ][ /}<CR>b99]}
map ]] j0[[%/{<CR>
map [] k$][%?}<CR>

" my lite terminal hax (~/.vim/plugin/terminal)
" philosophy: terms are lightweight and isolated/throwaway.
" - trivial to create and close
" - easy to swap back & forth (assumes you don't use tabs otherwise)
" - don't pollute buffer list
" note: an alternative to this would be 1 or 2 dedicated Ctrl-keys that open/switch
" to terminal windows, like harpoon.
nnoremap <leader>t :call CreateLiteTerm(1)<CR>ls<CR>
nnoremap <leader>T :call CreateLiteTerm(0)<CR>ls<CR>
tnoremap <F3> <C-w>gt
noremap <F3> gt
inoremap <F3> <C-o>gt

" coc (~/.vim/plugin/coc-config.vim)
nnoremap <leader>cc :call ToggleCoc()<CR>
" completion commands
inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"
" goto
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
autocmd CursorHold * silent call CocActionAsync('highlight')
nnoremap <silent> K :call ShowDocumentation()<CR>
nmap <leader>cl  <Plug>(coc-codeaction-cursor)
" nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)

" fzf (home-row optimized, I press these the most!)
nnoremap <silent> <leader>sf :Rg<CR>
nnoremap <silent> <leader>fj :Buffers<CR>
nnoremap <silent> <leader>fk :FzfFilesUppable<CR>
nnoremap <silent> <leader>fl :Helptags<CR>
nnoremap <silent> <leader>fh :History<CR>
nnoremap <silent> <leader>fu :GFiles<CR>


" ~~ misc mappings ~~
" open last buffer in a botright split ("split previous")
nnoremap <silent> <leader>sp :execute "botright split " .. bufname("#")<CR>

" testing
" todo: fix (breaks when toggling 2x first time on grep operator plugin).
nnoremap <leader>y :call QuickfixToggle()<CR>
nnoremap <leader>x :call FoldColumnToggle()<CR>

"==================== Operators ==================== 
" grep (plugin/grep-operator.vim) "todo: screen funkiness. redraw?
nnoremap <leader>g <Plug>GrepOperatorNormalMode
vnoremap <leader>g <Plug>GrepOperatorVisualMode

"==================== Motions ==================== 
" markdown heading in current section
onoremap ih :<c-u>execute "normal! ?^\\(=\\\|-\\)\\+$\r:nohlsearch\rkvg_"<cr>
onoremap ah :<c-u>execute "normal! ?^\\(=\\\|-\\)\\+$\r:nohlsearch\rg_vk0"<cr>

"}}}

" ~~~ Autocommands ~~~ {{{
augroup vimrc
  autocmd!
  au vimenter * ++nested colorscheme gruvbox

  " testing: code templates
  au FileType python iabbrev <buffer> fff def func(a: int) -> int:<cr>return 1
augroup end

augroup filetype_vim
  autocmd!
  " enable folding for Vimscript files (usage: 'za' to toggle)
  autocmd FileType vim setlocal foldmethod=marker

  " (exclude 'curdir' from viewoptions to not clobber current dir)
  let &viewoptions="folds,cursor"

  " remember folds for vimrc 
  autocmd BufWinLeave vimrc mkview
  autocmd BufWinEnter vimrc silent loadview 
augroup end
" }}}

" ~~~ Settings ~~~ {{{
" Briefly show matching brackets when text indicator is over them
" disable indents for html, though, cuz that's my Xah style
au FileType html set indentexpr=""

" }}}
